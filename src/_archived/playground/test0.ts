function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
function test(param1: string, param2?: boolean[]): [number, string] {
  let another: number;
  const num: number = 10;
  let str: string = 'hi';

  var bb: Object = {};

  let u; // use any type
  let x = 10; // TODO: use implicit type
  const y = 'hi';
  x = 1; // TODO: check reassignments
  return [num, str]; // TODO: check return value
}

let g;
let e = g = 10;
g = 'hi';
g = 10;
